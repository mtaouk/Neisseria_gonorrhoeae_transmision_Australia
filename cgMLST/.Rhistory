load("Threshold.RData")
load("~/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/NG_transmission/cgMLST threshold/For_github/Threshold.RData")
# Libraries
library(ggtree)
# Libraries
library(ggtree)
library(tidyverse)
# Libraries
library(ggtree)
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(ggridges)
library(reshape2)
library(scales)
library(patchwork)
library(ape)
# melt matrix keeping only top of pyramid
cgMLST_melt = data.frame(ID1=rownames(cgMLST_matrix_all)[row(cgMLST_matrix_all)[upper.tri(cgMLST_matrix_all)]], ID2=colnames(cgMLST_matrix_all)[col(cgMLST_matrix_all)[upper.tri(cgMLST_matrix_all)]], dist=cgMLST_matrix_all[upper.tri(cgMLST_matrix_all)])
# Merge cgMLST_melt with dataframe that tells us which IDs are the callibration isolates
cgMLST_melt = cgMLST_melt %>% merge(intrapatient, by.x = "ID1", by.y = "AUSMDU", all.x = F, all.y = F) %>% merge(intrapatient, by.x = "ID2", by.y = "AUSMDU", all.x = F, all.y = F)
# Check for NAs
sum(is.na(cgMLST_melt))
# Create a new column called "check" that indicates whether the Patient_no.x and Patient_no.y columns are the same or different
cgMLST_melt$check = ifelse(cgMLST_melt$Patient_no.x == cgMLST_melt$Patient_no.y, "same", "diff")
between_patients = filter(cgMLST_melt, cgMLST_melt$check == "diff")
between_patients$legend = "Between individuals"
between_patients = data.frame(between_patients$dist, between_patients$legend)
colnames(between_patients)[1] <- "dist"
colnames(between_patients)[2] <- "legend"
min(between_patients$dist)
max(between_patients$dist)
median(between_patients$dist)
within_patients = filter(cgMLST_melt, cgMLST_melt$check == "same")
within_patients = filter(within_patients, within_patients$Cat.x == "WIthin-patient")
within_patients$legend = "Within individuals"
within_patients = data.frame(within_patients$dist, within_patients$legend)
colnames(within_patients)[1] <- "dist"
colnames(within_patients)[2] <- "legend"
min(within_patients$dist)
max(within_patients$dist)
median(within_patients$dist)
within_site = filter(cgMLST_melt, cgMLST_melt$check == "same")
within_site = filter(within_site, within_site$Cat.x == "Within-site")
within_site$legend = "Within site"
within_site = data.frame(within_site$dist, within_site$legend)
colnames(within_site)[1] <- "dist"
colnames(within_site)[2] <- "legend"
min(within_site$dist)
max(within_site$dist)
median(within_site$dist)
View(within_site)
View(within_patients)
within_patients = filter(cgMLST_melt, cgMLST_melt$check == "same")
within_patients = filter(within_patients, within_patients$Cat.x == "WIthin-patient")
View(within_patients)
SNP_matrix <- as.matrix(read.csv("6215_core_dists.txt", sep = "\t", row.names = 1))
intrapatient <- read.csv("~/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/NG_transmission/cgMLST threshold/intrapatient.csv")
unique <- read.csv("~/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/NG_transmission/cgMLST threshold/passes.csv")
# melt matrix keeping only top of pyramid
SNP_melt = data.frame(ID1=rownames(SNP_matrix)[row(SNP_matrix)[upper.tri(SNP_matrix)]], ID2=colnames(SNP_matrix)[col(SNP_matrix)[upper.tri(SNP_matrix)]], dist=SNP_matrix[upper.tri(SNP_matrix)])
# Merge SNP_melt with dataframe that tells us which IDs are the callibration isolates (~5 mins)
SNP_melt = SNP_melt %>% merge(intrapatient, by.x = "ID1", by.y = "AUSMDU", all.x = F, all.y = F) %>% merge(intrapatient, by.x = "ID2", by.y = "AUSMDU", all.x = F, all.y = F)
# Check for NAs
sum(is.na(SNP_melt))
# Create a new column called "check" that indicates whether the Patient_no.x and Patient_no.y columns are the same or different
SNP_melt$check = ifelse(SNP_melt$Patient_no.x == SNP_melt$Patient_no.y, "same", "diff")
between_patients = filter(SNP_melt, SNP_melt$check == "diff")
between_patients$legend = "Between individuals"
between_patients = data.frame(between_patients$dist, between_patients$legend)
colnames(between_patients)[1] <- "dist"
colnames(between_patients)[2] <- "legend"
min(between_patients$dist)
max(between_patients$dist)
median(between_patients$dist)
within_patients = filter(SNP_melt, SNP_melt$check == "same")
within_patients = filter(within_patients, within_patients$Cat.y == "WIthin-patient")
within_patients$legend = "Within individuals"
within_patients = data.frame(within_patients$dist, within_patients$legend)
colnames(within_patients)[1] <- "dist"
colnames(within_patients)[2] <- "legend"
min(within_patients$dist)
max(within_patients$dist)
median(within_patients$dist)
within_site = filter(SNP_melt, SNP_melt$check == "same")
within_site = filter(within_site, within_site$Cat.x == "Within site")
within_site = filter(SNP_melt, SNP_melt$check == "same")
within_site = filter(within_site, within_site$Cat.x == "Within-site")
within_site = filter(SNP_melt, SNP_melt$check == "same")
View(within_site)
View(SNP_melt)
unique(SNP_melt$Cat.x)
View(SNP_melt)
View(SNP_matrix)
SNP_matrix <- as.matrix(read.csv("6215_core_dists.txt", sep = "\t", row.names = 1))
intrapatient <- read.csv("~/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/NG_transmission/cgMLST threshold/intrapatient.csv")
unique <- read.csv("~/Library/CloudStorage/OneDrive-TheUniversityofMelbourne/NG_transmission/cgMLST threshold/passes.csv")
# melt matrix keeping only top of pyramid
SNP_melt = data.frame(ID1=rownames(SNP_matrix)[row(SNP_matrix)[upper.tri(SNP_matrix)]], ID2=colnames(SNP_matrix)[col(SNP_matrix)[upper.tri(SNP_matrix)]], dist=SNP_matrix[upper.tri(SNP_matrix)])
# Merge SNP_melt with dataframe that tells us which IDs are the callibration isolates (~5 mins)
SNP_melt = SNP_melt %>% merge(intrapatient, by.x = "ID1", by.y = "AUSMDU", all.x = F, all.y = F) %>% merge(intrapatient, by.x = "ID2", by.y = "AUSMDU", all.x = F, all.y = F)
# Check for NAs
sum(is.na(SNP_melt))
# Create a new column called "check" that indicates whether the Patient_no.x and Patient_no.y columns are the same or different
SNP_melt$check = ifelse(SNP_melt$Patient_no.x == SNP_melt$Patient_no.y, "same", "diff")
between_patients = filter(SNP_melt, SNP_melt$check == "diff")
between_patients$legend = "Between individuals"
between_patients = data.frame(between_patients$dist, between_patients$legend)
colnames(between_patients)[1] <- "dist"
colnames(between_patients)[2] <- "legend"
min(between_patients$dist)
max(between_patients$dist)
median(between_patients$dist)
within_patients = filter(SNP_melt, SNP_melt$check == "same")
within_patients = filter(within_patients, within_patients$Cat.y == "WIthin-patient")
within_patients$legend = "Within individuals"
within_patients = data.frame(within_patients$dist, within_patients$legend)
colnames(within_patients)[1] <- "dist"
colnames(within_patients)[2] <- "legend"
min(within_patients$dist)
max(within_patients$dist)
median(within_patients$dist)
unique(SNP_melt$Cat.x)
within_site = filter(SNP_melt, SNP_melt$check == "same")
within_site = filter(within_site, within_site$Cat.x == "Within-site")
within_site$legend = "Within site"
within_site = data.frame(within_site$dist, within_site$legend)
colnames(within_site)[1] <- "dist"
colnames(within_site)[2] <- "legend"
min(within_site$dist)
max(within_site$dist)
median(within_site$dist)
dist = c(SNP_matrix["AUSMDU00054152","AUSMDU00054265"],
SNP_matrix["AUSMDU00056203","AUSMDU00056226"],
SNP_matrix["AUSMDU00058007","AUSMDU00058008"],
SNP_matrix["AUSMDU00058728","AUSMDU00058842"],
SNP_matrix["AUSMDU00059133","AUSMDU00059135"],
SNP_matrix["AUSMDU00059905","AUSMDU00059919"],
SNP_matrix["AUSMDU00060670","AUSMDU00060683"],
SNP_matrix["AUSMDU00061345","AUSMDU00061360"],
SNP_matrix["AUSMDU00064875","AUSMDU00064881"])
legend = c("Paired couples")
Pairs = data.frame(dist, legend)
min(Pairs$dist)
max(Pairs$dist)
median(Pairs$dist)
data_merged = rbind(between_patients, within_patients, within_site, Pairs)
data_merged = rbind(between_patients, within_patients, within_site, Pairs)
data_merged_within = rbind(within_patients, within_site, Pairs)
data_merged_within = rbind(within_patients, within_site, Pairs)
rm(between_patients, within_patients, within_site, Pairs, dist, legend)
View(data_merged)
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise allelic difference") +
scale_fill_brewer(palette = "greens") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples"))))
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise cgMLST distance") +
scale_fill_brewer(palette = "greens") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples")))) +
scale_x_continuous(limits = c(-1, 10))
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise allelic difference") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples"))))
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise allelic difference") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples"))))
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise cgMLST distance") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired couples")))) +
scale_x_continuous(limits = c(-1, 10))
save.image(file = "SNPs.Rdata")
# make unique only
SNP_matrix_unique <- SNP_matrix[, (colnames(SNP_matrix) %in% unique$pass)]
# make unique only
SNP_matrix <- read.csv("6215_core_dists.txt", sep = "\t")
View(SNP_matrix)
SNP_matrix_unique <- filter(SNP_matrix$X %in% unique$pass)
SNP_matrix_unique <- filter(SNP_matrix, SNP_matrix$X %in% unique$pass)
SNP_matrix_unique <- SNP_matrix[, (colnames(SNP_matrix) %in% unique$pass)]
SNP_matrix_unique <- SNP_matrix_unique[, (colnames(SNP_matrix_unique) %in% unique$pass)]
# make unique only
SNP_matrix <- read.csv("6215_core_dists.txt", sep = "\t")
# make unique only
SNP_matrix <- read.csv("6215_core_dists.txt", sep = "\t")
SNP_matrix_unique <- filter(SNP_matrix, SNP_matrix$X %in% unique$pass)
SNP_matrix_unique <- filter(SNP_matrix, SNP_matrix$X %in% unique$pass)
SNP_matrix_unique <- SNP_matrix_unique[, (colnames(SNP_matrix_unique) %in% unique$pass)]
View(SNP_matrix_unique)
# make unique only
SNP_matrix <- read.csv("6215_core_dists.txt", sep = "\t")
View(SNP_matrix)
SNP_matrix_unique <- filter(SNP_matrix, SNP_matrix$X %in% unique$pass)
SNP_matrix_unique <- SNP_matrix_unique[, (colnames(SNP_matrix_unique) %in% c(unique$pass, "X"))]
row.names(SNP_matrix_unique) <- SNP_matrix_unique$ID1
SNP_matrix_unique$ID1 <- NULL
SNP_matrix_unique = as.matrix(SNP_matrix_unique)
View(SNP_matrix_unique)
SNP_matrix <- read.csv("6215_core_dists.txt", sep = "\t")
SNP_matrix_unique <- filter(SNP_matrix, SNP_matrix$X %in% unique$pass)
SNP_matrix_unique <- SNP_matrix_unique[, (colnames(SNP_matrix_unique) %in% c(unique$pass, "X"))]
row.names(SNP_matrix_unique) <- SNP_matrix_unique$X
SNP_matrix_unique$X <- NULL
SNP_matrix_unique = as.matrix(SNP_matrix_unique)
dist <- as.dist(SNP_matrix_unique)
hc <- hclust(dist, method = "single")
cut <- cutree(hc, h=7)
#convert to dataframe
cut_df <- as.data.frame(cut)
rm(dist, hc, cut)
View(SNP_matrix_unique)
View(cut_df)
cut <- cutree(hc, h=0)
dist <- as.dist(SNP_matrix_unique)
hc <- hclust(dist, method = "single")
cut <- cutree(hc, h=0)
#convert to dataframe
cut_df <- as.data.frame(cut)
rm(dist, hc, cut)
dist = c(SNP_matrix["AUSMDU00054152","AUSMDU00054265"],
SNP_matrix["AUSMDU00056203","AUSMDU00056226"],
SNP_matrix["AUSMDU00058007","AUSMDU00058008"],
SNP_matrix["AUSMDU00058728","AUSMDU00058842"],
SNP_matrix["AUSMDU00059133","AUSMDU00059135"],
SNP_matrix["AUSMDU00059905","AUSMDU00059919"],
SNP_matrix["AUSMDU00060670","AUSMDU00060683"],
SNP_matrix["AUSMDU00061345","AUSMDU00061360"],
SNP_matrix["AUSMDU00064875","AUSMDU00064881"])
between_patients = filter(SNP_melt, SNP_melt$check == "diff")
between_patients$legend = "Between individuals"
between_patients = data.frame(between_patients$dist, between_patients$legend)
colnames(between_patients)[1] <- "dist"
colnames(between_patients)[2] <- "legend"
min(between_patients$dist)
max(between_patients$dist)
median(between_patients$dist)
within_patients = filter(SNP_melt, SNP_melt$check == "same")
within_patients = filter(within_patients, within_patients$Cat.y == "WIthin-patient")
within_patients$legend = "Within individuals"
within_patients = data.frame(within_patients$dist, within_patients$legend)
colnames(within_patients)[1] <- "dist"
colnames(within_patients)[2] <- "legend"
min(within_patients$dist)
max(within_patients$dist)
median(within_patients$dist)
within_site = filter(SNP_melt, SNP_melt$check == "same")
within_site = filter(within_site, within_site$Cat.x == "Within-site")
within_site$legend = "Within site"
within_site = data.frame(within_site$dist, within_site$legend)
colnames(within_site)[1] <- "dist"
colnames(within_site)[2] <- "legend"
min(within_site$dist)
max(within_site$dist)
median(within_site$dist)
dist = c(SNP_matrix["AUSMDU00054152","AUSMDU00054265"],
SNP_matrix["AUSMDU00056203","AUSMDU00056226"],
SNP_matrix["AUSMDU00058007","AUSMDU00058008"],
SNP_matrix["AUSMDU00058728","AUSMDU00058842"],
SNP_matrix["AUSMDU00059133","AUSMDU00059135"],
SNP_matrix["AUSMDU00059905","AUSMDU00059919"],
SNP_matrix["AUSMDU00060670","AUSMDU00060683"],
SNP_matrix["AUSMDU00061345","AUSMDU00061360"],
SNP_matrix["AUSMDU00064875","AUSMDU00064881"])
legend = c("Paired isolates")
Pairs = data.frame(dist, legend)
min(Pairs$dist)
max(Pairs$dist)
median(Pairs$dist)
data_merged = rbind(between_patients, within_patients, within_site, Pairs)
data_merged_within = rbind(within_patients, within_site, Pairs)
rm(between_patients, within_patients, within_site, Pairs, dist, legend)
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired isolates")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise SNP distance") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired isolates"))))
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired isolates")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise SNP distance") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired isolates")))) +
scale_x_continuous(limits = c(-1, 10))
View(data_merged)
dist = c(SNP_matrix["AUSMDU00054152","AUSMDU00054265"],
SNP_matrix["AUSMDU00056203","AUSMDU00056226"],
SNP_matrix["AUSMDU00058007","AUSMDU00058008"],
SNP_matrix["AUSMDU00058728","AUSMDU00058842"],
SNP_matrix["AUSMDU00059133","AUSMDU00059135"],
SNP_matrix["AUSMDU00059905","AUSMDU00059919"],
SNP_matrix["AUSMDU00060670","AUSMDU00060683"],
SNP_matrix["AUSMDU00061345","AUSMDU00061360"],
SNP_matrix["AUSMDU00064875","AUSMDU00064881"])
legend = c("Paired")
Pairs = data.frame(dist, legend)
min(Pairs$dist)
max(Pairs$dist)
median(Pairs$dist)
SNP_matrix <- as.matrix(read.csv("6215_core_dists.txt", sep = "\t", row.names = 1))
between_patients = filter(SNP_melt, SNP_melt$check == "diff")
between_patients$legend = "Between individuals"
between_patients = data.frame(between_patients$dist, between_patients$legend)
colnames(between_patients)[1] <- "dist"
colnames(between_patients)[2] <- "legend"
min(between_patients$dist)
max(between_patients$dist)
median(between_patients$dist)
within_patients = filter(SNP_melt, SNP_melt$check == "same")
within_patients = filter(within_patients, within_patients$Cat.y == "WIthin-patient")
within_patients$legend = "Within individuals"
within_patients = data.frame(within_patients$dist, within_patients$legend)
colnames(within_patients)[1] <- "dist"
colnames(within_patients)[2] <- "legend"
min(within_patients$dist)
max(within_patients$dist)
median(within_patients$dist)
within_site = filter(SNP_melt, SNP_melt$check == "same")
within_site = filter(within_site, within_site$Cat.x == "Within-site")
within_site$legend = "Within site"
within_site = data.frame(within_site$dist, within_site$legend)
colnames(within_site)[1] <- "dist"
colnames(within_site)[2] <- "legend"
min(within_site$dist)
max(within_site$dist)
median(within_site$dist)
dist = c(SNP_matrix["AUSMDU00054152","AUSMDU00054265"],
SNP_matrix["AUSMDU00056203","AUSMDU00056226"],
SNP_matrix["AUSMDU00058007","AUSMDU00058008"],
SNP_matrix["AUSMDU00058728","AUSMDU00058842"],
SNP_matrix["AUSMDU00059133","AUSMDU00059135"],
SNP_matrix["AUSMDU00059905","AUSMDU00059919"],
SNP_matrix["AUSMDU00060670","AUSMDU00060683"],
SNP_matrix["AUSMDU00061345","AUSMDU00061360"],
SNP_matrix["AUSMDU00064875","AUSMDU00064881"])
legend = c("Paired")
Pairs = data.frame(dist, legend)
min(Pairs$dist)
max(Pairs$dist)
median(Pairs$dist)
data_merged = rbind(between_patients, within_patients, within_site, Pairs)
data_merged_within = rbind(within_patients, within_site, Pairs)
rm(between_patients, within_patients, within_site, Pairs, dist, legend)
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise SNP distance") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired"))))
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise SNP distance") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired")))) +
scale_x_continuous(limits = c(-1, 10))
# make unique only
SNP_matrix_df <- read.csv("6215_core_dists.txt", sep = "\t")
SNP_matrix_unique <- filter(SNP_matrix_df, SNP_matrix_df$X %in% unique$pass)
SNP_matrix_unique <- SNP_matrix_unique[, (colnames(SNP_matrix_unique) %in% c(unique$pass, "X"))]
row.names(SNP_matrix_unique) <- SNP_matrix_unique$X
SNP_matrix_unique$X <- NULL
SNP_matrix_unique = as.matrix(SNP_matrix_unique)
dist <- as.dist(SNP_matrix_unique)
hc <- hclust(dist, method = "single")
cut <- cutree(hc, h=0)
#convert to dataframe
cut_df <- as.data.frame(cut)
rm(dist, hc, cut)
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise SNP distance") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired")))) +
scale_x_continuous(limits = c(0, 10))
ggplot(data_merged, aes(x=dist, fill = factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired")))) +
geom_histogram(binwidth = 1) +
theme_bw() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
legend.position = "none",
panel.background = element_rect(color = "black", size = 1),
strip.text.y = element_text(size = 8),
strip.background = element_rect(color="black", size = 1),
legend.title = element_text(size=8)) +
ylab("") +
xlab("Pairwise SNP distance") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = " ")) +
ggtitle("") +
facet_grid(scales = "free", rows = vars(factor(legend, level = c("Between individuals", "Within individuals", "Within site", "Paired")))) +
scale_x_continuous(limits = c(-1, 10))
save.image(file = "SNPs.Rdata")
# make unique only
SNP_matrix_df <- read.csv("6215_core_dists.txt", sep = "\t")
SNP_matrix_unique <- filter(SNP_matrix_df, SNP_matrix_df$X %in% unique$pass)
SNP_matrix_unique <- SNP_matrix_unique[, (colnames(SNP_matrix_unique) %in% c(unique$pass, "X"))]
row.names(SNP_matrix_unique) <- SNP_matrix_unique$X
SNP_matrix_unique$X <- NULL
SNP_matrix_unique = as.matrix(SNP_matrix_unique)
dist <- as.dist(SNP_matrix_unique)
hc <- hclust(dist, method = "single")
cut <- cutree(hc, h=0)
#convert to dataframe
cut_df <- as.data.frame(cut)
rm(dist, hc, cut)
save.image(file = "SNPs.Rdata")
